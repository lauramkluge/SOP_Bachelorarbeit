% ALTHAMMER Althammer polynomials generated by the Stieltjes algorithm.
% This code is used to generate Figure 3 and Figure 4
close all
clearvars
m = 60; s = 1; nd = [m m]; same = 1;
%alpha = -1/2;
alpha = 100;
a0 = alpha + 1;
ab = r_laguerre(m,alpha); 
iter = 10;

gamma_values = 10.^(-6:6);
%gamma_values = 1;
max_cond_A_g = zeros(1, length(gamma_values)); % Initialisiere Array für maximale Konditionszahlen von A_i
max_cond_B_g = zeros(1, length(gamma_values)); % Initialisiere Array für maximale Konditionszahlen von B_i
max_cond_C_g = zeros(1, length(gamma_values)); % Initialisiere Array für maximale Konditionszahlen von C_i

for gamma_index = 1:length(gamma_values)
    g = gamma_values(gamma_index);
    zw = gauss(m, ab);
    xw = [zw(:, 1) zw(:, 1) zw(:, 2) g * zw(:, 2)];

    %% Methods by Gautschi and Zhang [Gautschi,Zhang 1995]
    % Discretized Stieltjes procedure
    Stieltjes = stieltjes_sob(m, s, nd, xw, a0, same);

    %% New proposed methods
    % These are based on matrix manipulation, so first the starting vector and
    % Jordan matrix are formed. These generate the Krylov subspace

    % Starting vector
    w = zeros(2 * m, 1);
    w(2:2:2 * m) = sqrt(zw(:, 2));
    % Jordan matrix
    Z = zeros(2 * m);
    Z(1:2:end, 1:2:end) = diag(zw(:, 1));
    Z(2:2:end, 2:2:end) = diag(zw(:, 1));
    for k = 2 * m:-1:1 %1:2*m
        if mod(k, 2) == 1
            Z(k, k + 1) = sqrt(g);
        end
    end

    % Arnoldi iteration
    [V, H] = Arnoldi(Z, w, m + 1);
    % Updating procedure
    Hup = updating(Z, w, 'PR');

    %% plot computed zeros

    % Annahme: A, B, C und D sind Ihre Matrizen (Sie müssen sie entsprechend definieren)
    A = H; % Beispiel für A
    C = Stieltjes; % Beispiel für C
    B = Hup; % Beispiel für B
   

    % Initialisierung von Zellen für die Matrizen A_i, B_i, C_i
    A_i_cells = cell(1, 10);
    B_i_cells = cell(1, 10);
    C_i_cells = cell(1, 10);

    % Initialisierung der maximalen Konditionszahl für diese Iteration
    max_cond_A_i_gamma = 0;
    max_cond_B_i_gamma = 0;
    max_cond_C_i_gamma = 0;

     %Init
    AC_Abw = zeros(1,iter);
    BC_Abw = zeros(1,iter);
    AB_Abw = zeros(1,iter);

    max_cond_A_iter = zeros(1,iter);
    max_cond_B_iter = zeros(1,iter);
    max_cond_C_iter = zeros(1,iter);

    % Schleife über i von 1 bis 10
    for i = 1:iter
        % Extrahiere die Submatrix A_i der Größe i x i
        A_i = A(1:i, 1:i);

        % Extrahiere die Submatrix B_i der Größe i x i
        B_i = B(1:i, 1:i);

        % Extrahiere die Submatrix C_i der Größe i x i
        C_i = C(1:i, 1:i);

        % Speichere die Submatrizen A_i, B_i, C_i und D_i in den Zellen
        A_i_cells{i} = A_i;
        B_i_cells{i} = B_i;
        C_i_cells{i} = C_i;

        % % Berechne und speichere die maximale Konditionszahl für A_i in dieser Iteration
        [VA_i, ~] = eig(A_i);
        [VB_i, ~] = eig(B_i);
        [VC_i, ~] = sobzeros_mine(i,i,C);
        max_cond_A_i_gamma = max(max_cond_A_i_gamma, cond(VA_i));
        max_cond_B_i_gamma = max(max_cond_B_i_gamma, cond(VB_i));
        max_cond_C_i_gamma = max(max_cond_C_i_gamma, cond(VC_i));

        max_cond_A_iter(i) = cond(VA_i);
        max_cond_B_iter(i) = cond(VB_i);
        max_cond_C_iter(i) = cond(VC_i);
    end

    % Plotten der Eigenwerte der Matrizen A_i, B_i, C_i
    figure;

    for i = 1:iter
        % Berechnung der Eigenwerte für A_i
        eigenvalues_A_i = sort(eig(A_i_cells{i}));

        % Berechnung der Eigenwerte für B_i
        eigenvalues_B_i = sort(eig(B_i_cells{i}));

        % Berechnung der Eigenwerte für C_i
        eigenvalues_C_i = sort(sobzeros(i,i,C));

        % Diskrete Schritte für die y-Achse
        y_values_A_i = i * ones(size(eigenvalues_A_i));
        y_values_B_i = i * ones(size(eigenvalues_B_i));
        y_values_C_i = i * ones(size(eigenvalues_C_i));

        % Plot der Eigenwerte von A_i in Rot
        scatter(real(eigenvalues_A_i), y_values_A_i, 'rx');
        hold on;

        % Plot der Eigenwerte von B_i in Blau
        scatter(real(eigenvalues_B_i), y_values_B_i, 'b+');

        % Plot der Eigenwerte von C_i in Grün
        scatter(real(eigenvalues_C_i), y_values_C_i, 'go');
    
        AC_Abw(i) = max(abs(eigenvalues_A_i-eigenvalues_C_i));
        BC_Abw(i) = max(abs(eigenvalues_B_i-eigenvalues_C_i));
        AB_Abw(i) = max(abs(eigenvalues_A_i-eigenvalues_B_i));
    end
    % Achsentitel und Beschriftungen
    title("Nullstellen der orthonormalen Polynome p_k für gamma="+num2str(g));
    xlabel('Reelle Achse');
    ylabel('k');
    lgd = legend('Arnoldi-', 'Aufteilungs-', 'Stieltjes');
    title(lgd,'Verfahren');

    % Gitter hinzufügen
    grid off;

    % Achsen anpassen
    axis tight;

    hold off;
   % % Speichere die maximale Konditionszahl für A_i für diese Gamma-Iteration
    max_cond_A_g(gamma_index) = max_cond_A_i_gamma;
    max_cond_B_g(gamma_index) = max_cond_B_i_gamma;
    max_cond_C_g(gamma_index) = max_cond_C_i_gamma;


    figure;    
    semilogy(AC_Abw);
    hold on;
    semilogy(BC_Abw);
    semilogy(AB_Abw);
    title("Nullstellenabweichung p_k für gamma="+num2str(g));
    legend('Arnoldi/Stieltjes', 'Aufteilung/Stieltjes', 'Arnoldi/Aufteilung');
    hold off;

    figure;
    semilogy(max_cond_A_iter, 'bx');
    hold on;
    semilogy(max_cond_B_iter, 'ro');
    semilogy(max_cond_C_iter);
    title("Konditionierung EW-V für gamma="+num2str(g));
    legend('Arnoldi-', 'Aufteilungs-', 'Stieltjes');
    hold off;
end


% Plot der maximalen Konditionszahlen für A_i, B_i, C_i und D_i für jede Gamma-Iteration
figure;
loglog(gamma_values, max_cond_A_g, '-ro', 'LineWidth', 2); % Semilogx verwenden für logarithmische Skalierung auf der x-Achse
hold on;
loglog(gamma_values, max_cond_B_g, '-bs', 'LineWidth', 2);
loglog(gamma_values, max_cond_C_g, '-g^', 'LineWidth', 2);
title('Maximale Konditionszahlen der Eigenwertberechnungen für jede Gamma-Iteration');
xlabel('Gamma');
ylabel('Konditionszahl');
legend('Arnoldi-', 'Aufteilungs-', 'Stieltjes');
grid on;

